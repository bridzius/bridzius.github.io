!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="/dist",e(e.s=0)}([function(t,e,n){"use strict";e.__esModule=!0;var r=n(1);n(3);for(var o=Math.ceil(255*Math.random()),u=Math.ceil(255*Math.random()),a=Math.ceil(255*Math.random()),i=new r.default(o,u,a),s=new r.default,c=0,h=0;i.contrast(s.rgb)<=6;)console.log("Round, ",h),h++,c++,s=new r.default,c>10&&(i=new r.default,c=0);document.body.style.color=i.hex,document.body.style.backgroundColor=s.hex},function(t,e,n){"use strict";function r(){return Math.ceil(255*Math.random())}e.__esModule=!0;var o=n(2),u=function(){function t(t,e,n){void 0===t&&(t=r()),void 0===e&&(e=r()),void 0===n&&(n=r()),this.rgb=[t,e,n],this.red=t,this.green=e,this.blue=n,this.median=(this.red+this.green+this.blue)/3,this.hex=o.rgbToHex(this.red,this.green,this.blue)}return t.prototype.hue=function(t){return o.changeHue(this.hex,t)},t.prototype.contrast=function(t){var e=(o.luminance(t[0],t[1],t[2])+.05)/(o.luminance(this.rgb[0],this.rgb[1],this.rgb[2])+.05);return console.log(e),e},t}();e.default=u},function(t,e,n){"use strict";function r(t,e,n){return"#"+((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)}function o(t,e,n){var r=[t,e,n].map(function(t){return t/=255,t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)});return.2126*r[0]+.7152*r[1]+.0722*r[2]}function u(t){var e=t.replace(/^\s*#|\s*$/g,"");3===e.length&&(e=e.replace(/(.)/g,"$1$1"));var n=parseInt(e.substr(0,2),16)/255,r=parseInt(e.substr(2,2),16)/255,o=parseInt(e.substr(4,2),16)/255,u=Math.max(n,r,o),a=Math.min(n,r,o),i=u-a,s=(u+a)/2,c=0,h=0;return c=0===i?0:u===n?(r-o)/i%6*60:u===r?60*((o-n)/i+2):60*((n-r)/i+4),h=0===i?0:i/(1-Math.abs(2*s-1)),{h:c,s:h,l:s}}function a(t,e){var n=Math.floor(255*(t+e));return n<0&&(n=0),n}function i(t){var e,n,o,u=t.h,i=t.s,s=t.l,c=(1-Math.abs(2*s-1))*i,h=c*(1-(Math.abs(u/60%2)-1)),l=s-c/2;return u<60?(e=c,n=h,o=0):u<120?(e=h,n=c,o=0):u<180?(e=0,n=c,o=h):u<240?(e=0,n=h,o=c):u<300?(e=h,n=0,o=c):(e=c,n=0,o=h),e=a(e,l),n=a(n,l),o=a(o,l),r(e,n,o)}function s(t,e){var n=u(t);return n.h+=e,n.h>360?n.h-=360:n.h<0&&(n.h+=360),i(n)}e.__esModule=!0,e.rgbToHex=r,e.luminance=o,e.changeHue=s},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,